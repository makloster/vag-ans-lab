---
- name: Ansible playbook
  hosts: all

  vars_files:
    - roles/geerlingguy.mysql/vars/main.yml

  roles:
    - role: geerlingguy.mysql
      become: yes

  collections:
    - community.mysql

  environment:
    RBENV_ROOT: "{{ rbenv_dir }}"
    PATH: "{{ rbenv_dir }}/bin:{{ rbenv_dir }}/shims:{{ rbenv_dir }}/plugins/ruby-build/bin:{{ ansible_env.PATH }}"
    RAILS_ENV: "production"
    REDMINE_LANG: "es"

  pre_tasks:
    - name: Install tools and dependencies
      become: true
      block:
        - name: Update list of available packages
          apt:
            update_cache: true
            cache_valid_time: 86400
            autoclean: true
       
        - name: Install Git & ACL
          apt:
            name:
              - git
              - acl
       
        - name: Install development tools
          apt:
            name: build-essential
       
        - name: Install Ruby dependencies
          apt:
            name:
              - autoconf
              - bison
              - patch
              - rustc
              - libssl-dev 
              - libyaml-dev 
              - libreadline6-dev 
              - zlib1g-dev 
              - libgmp-dev 
              - libncurses5-dev 
              - libffi-dev 
              - libgdbm6 
              - libgdbm-dev 
              - libdb-dev 
              - uuid-dev

        - name: Install pymysql
          apt:
            name: python3-pymysql

  tasks:
    - name: Create user redmine
      become: true
      user:
        name: redmine
        home: "{{ redmine_user_home }}"
        state: present
        shell: /bin/bash

    - name: Install Rbenv and Ruby-build before Ruby
      become_user: redmine
      become: true
      block:
        - name: Clone Rbenv repo
          git:
            repo: "https://github.com/rbenv/rbenv.git"
            dest: "{{ rbenv_dir }}"

        - name: Clone Ruby-build repo
          git:
            repo: "https://github.com/rbenv/ruby-build.git"
            dest: "{{ rbenv_dir }}/plugins/ruby-build"

        - name: Configure shell to load Rbenv
          lineinfile:
            path: "{{ redmine_user_home }}/.bashrc"
            line: 'eval "$(~/.rbenv/bin/rbenv init - bash)"'

        - name: Install Ruby 3.1.3
          command: "rbenv install 3.1.3 -s"

        - name: Set local Ruby version
          command: "rbenv global 3.1.3 -s"

    - name: Download and extract Redmine 5.0.4 repo
      become_user: redmine
      become: true
      unarchive:
        src: "https://github.com/redmine/redmine/archive/refs/tags/5.0.4.tar.gz"
        dest: "{{ redmine_user_home }}/"
        remote_src: true

    - name: Install bundle
      become: true
      become_user: redmine
      command: "bundle install"
      args:
        chdir: "{{ redmine_dir }}"

    - name: Config and start Puma
      become: true
      block:
        - name: Add www-data to redmine group
          user:
            name: www-data
            groups: redmine
            append: yes

        - name: Set permissions and create directories
          file:
            path: "{{ item.path }}"
            state: directory
            mode: 0755
            owner: redmine
            group: redmine
          loop:
            - { path: "{{ redmine_dir }}" }
            - { path: "{{ shared_dir }}/sockets/" }
            - { path: "{{ shared_dir }}/log/" }
            - { path: "{{ shared_dir }}/pids/" }

        - name: Setup Puma config
          become_user: redmine 
          template:
            src: puma.rb.j2
            dest: "{{ config_dir }}/puma.rb"
          notify: Restart Puma 

        - name: Create puma.service
          template:
            src: puma.service.j2
            dest: /etc/systemd/system/puma.service

        - name: Initialize Puma service
          systemd:
            name: "{{ puma_service }}"
            state: started
            enabled: yes
    
    - name: Install nginx and setup config
      become: true
      block:
        - name: Install nginx
          apt:
            name:
              - nginx

        - name: Initialize NGINX service
          systemd:
            name: nginx
            state: started
            enabled: yes

        - name: Config NGINX with template
          template:
            src: default.j2
            dest: "/etc/nginx/conf.d/http.conf"
          notify: Restart NGINX

  handlers:
  - name: Restart Puma
    become: true
    systemd:
      name: "{{ puma_service }}"
      state: restarted

  - name: Restart NGINX
    become: true
    systemd:
      name: nginx
      state: restarted

